

{
    if (argc < 3)
    {
        printf("Incorrect program usage\n"
               "Usage: %s <SerialPort>\n"
               "Example: %s /dev/ttyS1\n",
               argv[0],
               argv[0]);
        exit(1);
    }




    const char *serialPortName = argv[1];
    const char *status_ = argv[2];

    enum Status teste = TRANSMITER;

    if (strcmp(status_, "recetor") == 0) {
        printf("\n\nMAIN STRCMP RECEIVER\n\n");
        teste = RECEIVER;
    }
    else if (strcmp(status_,"emissor") == 0){
        printf("\n\nMAIN STRCMP TRANSMITTER\n\n");
        teste = TRANSMITER;
   }

    //setup(serialPortName);



    printf("%i",llopen(serialPortName, teste));

    sleep(1);


    if (teste == TRANSMITER){
        sleep(1);
        unsigned char buf[11] = {0x00, 0x00, 0x7e, 0x7e, 0x00, 0x7e, 0x7e, 0x7e , 0x00, 0x00, 0x00};
        unsigned char* buf_point = buf;
        //llwrite(fd,buf_point,5);


        llwrite(fd,buf_point,10);
        int n = 10 ;
        while (n>0)
        {
            buf_point++;
            n--;
        }
        llwrite(fd,buf_point,1);

        llclose(fd);
        printf("\n\nLLCLOSE DONE\n\n");
        sleep(1);
        sendcontrol(A_TRANSMITER, UA);



    }

    int byte = 0;

    unsigned char buff_received[] = {0};
    unsigned char* buff_received_point = buff_received;
    if (teste == RECEIVER){

        llread(fd, buff_received_point);
        int n = 10 ;
        while (n>0)
        {
            buff_received_point++;
            n--;
        }
        llread(fd, buff_received_point);
        //buff_received_point++;
        //buff_received_point++;
        printf("\n\n3RD READ\n\n");
        llread(fd, buff_received_point);
        printf("\n\n4TH READ\n\n");
        llread(fd, buff_received_point);




        /*
        llread(fd, buff_received_point);
        buff_received_point++;
        buff_received_point++;
        buff_received_point++;
        llread(fd, buff_received_point);
        */

    /*
    while(true){
        //printf("\nchega ao while true\n");
        if (read(fd,&byte,1) > 0){
        printf("0x:%x", byte);
        }

    }
    */
    printf("\n o buffer ficou com \n");
    for (int i = 0; i < 11; i++)
    {
        printf("-%x-", buff_received[i]);
    }
}

/*
sleep(1);


if (tcsetattr(fd, TCSANOW, &oldtio) == -1)
{
    perror("tcsetattr");
    exit(-1);
}

close(fd);
*/

return 0;
}


